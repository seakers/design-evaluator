
#   _____           _                                   _
#  |_   _|         | |                                 | |
#    | |  _ __  ___| |_ _ __ _   _ _ __ ___   ___ _ __ | |_ ___
#    | | | '_ \/ __| __| '__| | | | '_ ` _ \ / _ \ '_ \| __/ __|
#   _| |_| | | \__ \ |_| |  | |_| | | | | | |  __/ | | | |_\__ \
#  |_____|_| |_|___/\__|_|   \__,_|_| |_| |_|\___|_| |_|\__|___/
#

query Instrument($problem_id: Int) {
    items: Instrument(where: {Join__Problem_Instruments: {problem_id: {_eq: $problem_id}}}) {
        id
        name
        attributes: Join__Instrument_Characteristics {
            Instrument_Attribute {
                id
                name
            }
            value
        }
    }
}

query GlobalInstrument($group_id: Int!) {
    items: Instrument(where: {group_id: {_eq: $group_id}}) {
        id
        name
    }
}

query ProblemInstruments($problem_id: Int){
    items: Join__Instrument_Characteristic(where: {problem_id: {_eq: $problem_id}}, distinct_on: [instrument_id]) {
        Instrument {
            id
            name
            attributes: Join__Instrument_Characteristics(where: {problem_id: {_eq: $problem_id}}) {
                value
                Instrument_Attribute {
                    name
                }
            }
        }
    }
}

query InstrumentAttribute($group_id: Int) {
    items: Instrument_Attribute(where: {Group: {id: {_eq: $group_id}}}) {
        id
        name
        slot_type
        type
        values: Join__Instrument_Attribute_Values {
            Accepted_Value {
                value
            }
        }
    }
}

query MeasurementAttribute($group_id: Int!) {
    items: Measurement_Attribute(where: {Group: {id: {_eq: $group_id}}}) {
        id
        name
        slot_type
        type
        values: Join__Measurement_Attribute_Values {
            Accepted_Value {
                value
            }
        }
    }
}

query EnabledInstruments($problem_id: Int!){
    items: Join__Problem_Instrument(where: {problem_id: {_eq: $problem_id}}) {
        instrument: Instrument {
            name
            id
        }
    }
}

query InstrumentMeasurements($problem_id: Int, $instrument_name: String) {
    items: Instrument(where: {Join__Problem_Instruments: {problem_id: {_eq: $problem_id}}, name: {_eq: $instrument_name}}) {
        Join__Instrument_Capabilities {
            Measurement {
                name
            }
        }
    }
}


#   ____       _     _ _
#  / __ \     | |   (_) |
# | |  | |_ __| |__  _| |_ ___
# | |  | | '__| '_ \| | __/ __|
# | |__| | |  | |_) | | |_\__ \
#  \____/|_|  |_.__/|_|\__|___/

# modify
query ProblemOrbits($problem_id: Int!){
    items: Join__Problem_Orbit(where: {problem_id: {_eq: $problem_id}}) {
        Orbit {
            id
            name
            attributes: Join__Orbit_Attributes {
                Orbit_Attribute {
                    name
                }
                value
            }
        }
    }
}

query OrbitAttribute($group_id: Int) {
    items: Orbit_Attribute(where: {Group: {id: {_eq: $group_id}}}) {
        id
        name
        slot_type
        type
    }
}

query ProblemOrbitJoin($problem_id: Int!) {
    items: Join__Problem_Orbit(where: {problem_id: {_eq: $problem_id}}){
        Orbit {
            id
            name
        }
    }
}




#   _                            _      __      __  _     _      _
#  | |                          | |     \ \    / / | |   (_)    | |
#  | |     __ _ _   _ _ __   ___| |__    \ \  / /__| |__  _  ___| | ___
#  | |    / _` | | | | '_ \ / __| '_ \    \ \/ / _ \ '_ \| |/ __| |/ _ \
#  | |___| (_| | |_| | | | | (__| | | |    \  /  __/ | | | | (__| |  __/
#  |______\__,_|\__,_|_| |_|\___|_| |_|     \/ \___|_| |_|_|\___|_|\___|


query ProblemLaunchVehicle($problem_id: Int!){
    items: Join__Problem_Launch_Vehicle(where: {problem_id: {_eq: $problem_id}}) {
        Launch_Vehicle {
            id
            name
            attributes: Join__Launch_Vehicle_Attributes {
                attribute: Launch_Vehicle_Attribute {
                    name
                }
                value
            }
        }
    }
}

query LaunchVehicleAttribute($group_id: Int) {
    items: Launch_Vehicle_Attribute(where: {Group: {id: {_eq: $group_id}}}) {
        id
        name
        slot_type
        type
    }
}




#   _____       _
#  |  __ \     | |
#  | |__) |   _| | ___  ___
#  |  _  / | | | |/ _ \/ __|
#  | | \ \ |_| | |  __/\__ \
#  |_|  \_\__,_|_|\___||___/

query AggregationRule($problem_id: Int) {
    items: Stakeholder_Needs_Panel(where: {problem_id: {_eq: $problem_id}}) {
        name
        index_id
        weight
        description
        objectives: Stakeholder_Needs_Objectives {
            name
            weight
            description
            subobjectives: Stakeholder_Needs_Subobjectives {
                name
                description
                weight
            }
        }
    }
}

query RequirementRuleCase($problem_id: Int) {
    items: Requirement_Rule_Case(where: {problem_id: {_eq: $problem_id}}) {
        description
        rule
        text
        value
        subobjective: Stakeholder_Needs_Subobjective {
            name
        }
        objective:Stakeholder_Needs_Objective {
            name
        }
        measurement: Measurement {
            name
        }
        measurement_attributes: Join__Case_Attributes {
            Measurement_Attribute {
                name
            }
            operation
            value
        }
    }
}

query RequirementRuleAttribute($problem_id: Int) {
    items: Requirement_Rule_Attribute(where: {problem_id: {_eq: $problem_id}}) {
        id
        justification
        scores
        thresholds
        type
        measurement: Measurement {
            name
        }
        measurement_attribute: Measurement_Attribute {
            name
        }
        problem: Problem {
            id
            name
        }
        objective: Stakeholder_Needs_Subobjective {
            id
            name
        }
    }
}


# OLD QUERY
#query CapabilityRule($group_id: Int!, $problem_id: Int!) {
#    items: Join__Instrument_Capability(where: {problem_id: {_eq: $problem_id}, group_id: {_eq: $group_id}, Instrument: {name: {_in: ["BIOMASS", "VIIRS", "SMAP_MWR", "SMAP_RAD", "CMIS"]}}}) {
#        instrument: Instrument {
#            name
#        }
#        measurement: Measurement {
#            name
#        }
#        measurement_attribute: Measurement_Attribute {
#            name
#        }
#        measurement_attribute_value: value
#    }
#}



query CapabilityRule($group_id: Int!, $inst_ids: [Int!]) {
    items: Join__Instrument_Capability(where: {group_id: {_eq: $group_id}, Instrument: {id: {_in: $inst_ids}}}) {
        instrument: Instrument {
            name
        }
        measurement: Measurement {
            name
        }
        measurement_attribute: Measurement_Attribute {
            name
        }
        measurement_attribute_value: value
    }
}

query SubobjectiveAttributeInformation($problem_id: Int, $name: String) {
    items: Stakeholder_Needs_Subobjective(where: {problem_id: {_eq: $problem_id}, name: {_eq: $name}}) {
        name
        description
        weight
    }
}





#   __  __ _         _
#  |  \/  (_)       (_)
#  | \  / |_ ___ ___ _  ___  _ __
#  | |\/| | / __/ __| |/ _ \| '_ \
#  | |  | | \__ \__ \ | (_) | | | |
#  |_|  |_|_|___/___/_|\___/|_| |_|


query WalkerMissionAnalysis($problem_id: Int){
    items: Walker_Mission_Analysis(where: {problem_id: {_eq: $problem_id}}) {
        sats_per_plane
        problem_id
        orbit_inclination
        orbit_altitude
        num_planes
        mission_architecture
        instrument_fov
        avg_revisit_time_us
        avg_revisit_time_tropics
        avg_revisit_time_southern_hemisphere
        avg_revisit_time_northern_hemisphere
        avg_revisit_time_global
        avg_revisit_time_cold_regiouis
    }
}



query MissionAttribute($problem_id: Int) {
    items: Mission_Attribute(where: {Problem: {id: {_eq: $problem_id}}}) {
        id
        name
        slot_type
        type
    }
}

query AttributeInheritance($problem_id: Int) {
    items: Inheritence_Attribute(where: {Problem: {id: {_eq: $problem_id}}}) {
        template1
        copySlotType1
        copySlotName1
        matchingSlotType1
        matchingSlotName1
        template2
        matchingSlotName2
        copySlotName2
        module
        id
    }
}

query FuzzyAttribute($problem_id: Int) {
    items: Fuzzy_Attribute(where: {Problem: {id: {_eq: $problem_id}}}) {
        id
        name
        parameter
        unit
        values: Fuzzy_Values {
            id
            value
            minimum
            mean
            maximum
        }
    }
}

query CostMissionAttribute($problem_id: Int, $attributes: [String!]!) {
    items: Mission_Attribute(where: {problem_id: {_eq: $problem_id}, name: {_in: $attributes}}) {
        id
        name
    }
}


#   _____ _        _        _           _     _
#  / ____| |      | |      | |         | |   | |
# | (___ | |_ __ _| | _____| |__   ___ | | __| | ___ _ __ ___
#  \___ \| __/ _` | |/ / _ \ '_ \ / _ \| |/ _` |/ _ \ '__/ __|
#  ____) | || (_| |   <  __/ | | | (_) | | (_| |  __/ |  \__ \
# |_____/ \__\__,_|_|\_\___|_| |_|\___/|_|\__,_|\___|_|  |___/

query PanelId($problem_id: Int!, $name: String!){
    items: Stakeholder_Needs_Panel(where: {problem_id: {_eq: $problem_id}, name: {_eq: $name}}) {
        id
        name
    }
}

query ObjectiveId($problem_id: Int!, $name: String!){
    items: Stakeholder_Needs_Objective(where: {problem_id: {_eq: $problem_id}, name: {_eq: $name}}) {
        id
        name
    }
}

query SubobjectiveId($problem_id: Int!, $name: String!){
    items: Stakeholder_Needs_Subobjective(where: {problem_id: {_eq: $problem_id}, name: {_eq: $name}}) {
        id
        name
    }
}




#                    _     _ _            _
#     /\            | |   (_) |          | |
#    /  \   _ __ ___| |__  _| |_ ___  ___| |_ _   _ _ __ ___
#   / /\ \ | '__/ __| '_ \| | __/ _ \/ __| __| | | | '__/ _ \
#  / ____ \| | | (__| | | | | ||  __/ (__| |_| |_| | | |  __/
# /_/    \_\_|  \___|_| |_|_|\__\___|\___|\__|\__,_|_|  \___|


query DatasetInfo($id: Int! = -1) {
    dataset: Dataset_by_pk(id: $id) {
        problem_id
        group_id
        id
        user_id
    }
}


query ArchitectureID($problem_id: Int!, $dataset_id: Int!, $input: String!) {
    items: Architecture(where: {problem_id: {_eq: $problem_id}, dataset_id: {_eq: $dataset_id}, input: {_eq: $input}}) {
        id
    }
}

query ArchitectureCount($problem_id: Int!, $dataset_id: Int!, $input: String!) {
    items: Architecture_aggregate(where: {problem_id: {_eq: $problem_id}, dataset_id: {_eq: $dataset_id}, input: {_eq: $input}}) {
        aggregate {
            count
        }
    }
}

mutation InsertArchitectureFast($problem_id: Int!, $dataset_id: Int!, $user_id: Int!, $input: String!, $science: float8, $cost: float8, $ga: Boolean!, $eval_status: Boolean, $improve_hv: Boolean = false){
    architecture: insert_Architecture_one(object: {problem_id: $problem_id, dataset_id: $dataset_id, user_id: $user_id, input: $input, science: $science, cost: $cost, ga: $ga, eval_status: $eval_status, improve_hv: $improve_hv}) {
        id
    }
}

mutation InsertArchitectureSlow($problem_id: Int!,
                                $dataset_id: Int!,
                                $user_id: Int!,
                                $input: String!,
                                $science: float8,
                                $cost: float8,
                                $ga: Boolean!,
                                $eval_status: Boolean,
                                $improve_hv: Boolean,
                                $critique: String,
                                $arch_scores: [ArchitectureScoreExplanation_insert_input!]!,
                                $panel_scores: [PanelScoreExplanation_insert_input!]!,
                                $objective_scores: [ObjectiveScoreExplanation_insert_input!]!,
                                $subobjective_scores: [SubobjectiveScoreExplanation_insert_input!]!,
                                $cost_informations: [ArchitectureCostInformation_insert_input!]!)
                                
{
    architecture: insert_Architecture(objects: 
    [
        {
            problem_id: $problem_id,
            dataset_id: $dataset_id,
            user_id: $user_id,
            input: $input,
            science: $science,
            cost: $cost,
            ga: $ga,
            eval_status: $eval_status,
            improve_hv: $improve_hv,
            critique: $critique,
            ArchitectureScoreExplanations: {data: $arch_scores},
            PanelScoreExplanations: {data: $panel_scores},
            ObjectiveScoreExplanations: {data: $objective_scores},
            SubobjectiveScoreExplanations: {data: $subobjective_scores},
            ArchitectureCostInformations: {data: $cost_informations}
        }
    ]) 
    {
        affected_rows
        returning {
            id
        }
    }
}

mutation UpdateArchitecture($problem_id: Int!, $dataset_id: Int!, $input: String!, $science: float8, $cost: float8, $eval_status: Boolean, $improve_hv: Boolean = false){
    items: update_Architecture(where: {problem_id: {_eq: $problem_id}, dataset_id: {_eq: $dataset_id}, input: {_eq: $input}}, _set: {science: $science, cost: $cost, eval_status: $eval_status, improve_hv: $improve_hv}) {
        returning {
            id
        }
    }
}


# ---> Score Explanations
mutation InsertArchitectureScoreExplanation($architecture_id: Int!, $panel_id: Int!, $satisfaction: float8){
    items: insert_ArchitectureScoreExplanation_one(object: {architecture_id: $architecture_id, panel_id: $panel_id, satisfaction: $satisfaction}) {
        id
    }
}
mutation InsertPanelScoreExplanation($architecture_id: Int!, $objective_id: Int!, $satisfaction: float8){
    items: insert_PanelScoreExplanation_one(object: {architecture_id: $architecture_id, objective_id: $objective_id, satisfaction: $satisfaction}) {
        id
    }
}
mutation InsertObjectiveScoreExplanation($architecture_id: Int!, $subobjective_id: Int!, $satisfaction: float8){
    items: insert_ObjectiveScoreExplanation_one(object: {architecture_id: $architecture_id, subobjective_id: $subobjective_id, satisfaction: $satisfaction}) {
        id
    }
}

mutation InsertSubobjectiveScoreExplanation($architecture_id: Int!, $subobjective_id: Int!, $measurement_attribute_values: jsonb!, $score: float8!, $taken_by: String!, $justifications: jsonb!) {
    items: insert_SubobjectiveScoreExplanation_one(object: {architecture_id: $architecture_id, subobjective_id: $subobjective_id, measurement_attribute_values: $measurement_attribute_values, score: $score, taken_by: $taken_by, justifications: $justifications}) {
        id
    }
}


# ---> Batch Score Explanations
mutation InsertArchitectureScoreExplanationBatch($objects: [ArchitectureScoreExplanation_insert_input!]!){
    items: insert_ArchitectureScoreExplanation(objects: $objects) {
        affected_rows
    }
}
mutation InsertPanelScoreExplanationBatch($objects: [PanelScoreExplanation_insert_input!]!){
    items: insert_PanelScoreExplanation(objects: $objects) {
        affected_rows
    }
}
mutation InsertObjectiveScoreExplanationBatch($objects: [ObjectiveScoreExplanation_insert_input!]!){
    items: insert_ObjectiveScoreExplanation(objects: $objects) {
        affected_rows
    }
}
mutation InsertSubobjectiveScoreExplanationBatch($objects: [SubobjectiveScoreExplanation_insert_input!]!){
    items: insert_SubobjectiveScoreExplanation(objects: $objects) {
        affected_rows
    }
}


# ---> Subobjective explanantions

query RequirementRulesForSubobjective($problem_id: Int!, $subobjective_name: String!) {
    items: Requirement_Rule_Attribute(where: {problem_id: {_eq: $problem_id}, Stakeholder_Needs_Subobjective: {name: {_eq: $subobjective_name}}}) {
        type
        measurement: Measurement {
            name
        }
        measurement_attribute: Measurement_Attribute {
            name
        }
        subobjective: Stakeholder_Needs_Subobjective {
            id
            name
        }
    }
}

# ---> Delete score explanations
mutation DeleteScoreExplanations($arch_id: Int!){
    delete_ArchitectureScoreExplanation(where: {architecture_id: {_eq: $arch_id}}) {
        affected_rows
    }
    delete_PanelScoreExplanation(where: {architecture_id: {_eq: $arch_id}}) {
        affected_rows
    }
    delete_ObjectiveScoreExplanation(where: {architecture_id: {_eq: $arch_id}}) {
        affected_rows
    }
    delete_SubobjectiveScoreExplanation(where: {architecture_id: {_eq: $arch_id}}) {
        affected_rows
    }
}


# ---> Cost Information
mutation InsertArchitectureCostInformation($architecture_id: Int!, $mission_name: String, $launch_vehicle: String, $cost: float8, $mass: float8, $power: float8, $others: float8){
    items: insert_ArchitectureCostInformation_one(object: {architecture_id: $architecture_id, mission_name: $mission_name, launch_vehicle: $launch_vehicle, cost: $cost, mass: $mass, power: $power, others: $others}) {
        id
    }
}
mutation InsertArchitectureCostInformationBatch($objects: [ArchitectureCostInformation_insert_input!]!){
    items: insert_ArchitectureCostInformation(objects: $objects) {
        affected_rows
    }
}
mutation InsertArchitecturePayloadBatch($objects: [ArchitecturePayload_insert_input!]!){
    items: insert_ArchitecturePayload(objects: $objects){
        affected_rows
    }
}
mutation InsertArchitectureBudgetBatch($objects: [ArchitectureBudget_insert_input!]!){
    items: insert_ArchitectureBudget(objects: $objects){
        affected_rows
    }
}

# ---> Delete cost information
query ArchitectureCostInformation($arch_id: Int!){
    items: ArchitectureCostInformation(where: {architecture_id: {_eq: $arch_id}}) {
        id
    }
}
mutation DeleteArchitecturePayloadBudget($arch_cost_id: Int!){
    delete_ArchitecturePayload(where: {arch_cost_id: {_eq: $arch_cost_id}}) {
        affected_rows
    }
    delete_ArchitectureBudget(where: {arch_cost_id: {_eq: $arch_cost_id}}) {
        affected_rows
    }
}
mutation DeleteArchitectureCostInformationPK($arch_cost_id: Int!){
    delete_ArchitectureCostInformation_by_pk(id: $arch_cost_id) {
        id
    }
}

# ---> Update architecture critique
mutation UpdateArchitectureCritique($arch_id: Int!, $critique: String){
    update_Architecture_by_pk(pk_columns: {id: $arch_id}, _set: {critique: $critique}) {
        id
        critique
    }
}


#  _    _ _     _             _           _
# | |  | (_)   | |           (_)         | |
# | |__| |_ ___| |_ ___  _ __ _  ___ __ _| |
# |  __  | / __| __/ _ \| '__| |/ __/ _` | |
# | |  | | \__ \ || (_) | |  | | (_| (_| | |
# |_|  |_|_|___/\__\___/|_|  |_|\___\__,_|_|

query HistoricalMissionMeasurementContinuity{
    items: ceos_missions {
        name
        start_date: launch_date
        end_date: eol_date
        instruments: ceos_instruments_in_missions {
            item: ceos_instrument {
                measurements:ceos_measurements_of_instruments {
                    item: ceos_measurement {
                        name
                    }
                }
            }
        }
    }
}





#   _____       _                   _       _   _
#  / ____|     | |                 (_)     | | (_)
# | (___  _   _| |__  ___  ___ _ __ _ _ __ | |_ _  ___  _ __  ___
#  \___ \| | | | '_ \/ __|/ __| '__| | '_ \| __| |/ _ \| '_ \/ __|
#  ____) | |_| | |_) \__ \ (__| |  | | |_) | |_| | (_) | | | \__ \
# |_____/ \__,_|_.__/|___/\___|_|  |_| .__/ \__|_|\___/|_| |_|___/
#                                    | |
#                                    |_|


subscription InstrumentSubscription($problem_id: Int!){
    items: Join__Problem_Instrument(where: {problem_id: {_eq: $problem_id}}) {
        Instrument {
            id
            name
        }
        problem_id
    }
}

subscription OrbitSubscription($problem_id: Int!){
    items: Join__Problem_Orbit(where: {problem_id: {_eq: $problem_id}}) {
        Orbit {
            id
            name
        }
        problem_id
    }
}

subscription AggregationRuleSubscription($problem_id: Int) {
    items: Stakeholder_Needs_Panel(where: {problem_id: {_eq: $problem_id}}) {
        name
        index_id
        weight
        description
        objectives: Stakeholder_Needs_Objectives {
            name
            weight
            description
            subobjectives: Stakeholder_Needs_Subobjectives {
                name
                description
                weight
            }
        }
    }
}

subscription InstrumentCharacteristicSubscription($problem_id: Int!){
    items: Join__Instrument_Characteristic(where: {problem_id: {_eq: $problem_id}}) {
        id
        value
    }
}


subscription LaunchVehicleSubscription($problem_id: Int!){
    items: Join__Problem_Launch_Vehicle(where: {problem_id: {_eq: $problem_id}}) {
        id
        Launch_Vehicle {
            name
            Join__Launch_Vehicle_Attributes {
                value
            }
        }
    }
}














